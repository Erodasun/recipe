import logging
import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É BotFather
API_TOKEN = os.environ.get('API_TOKEN')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–º—è —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ä–µ—Ü–µ–ø—Ç—ã
RECIPES_FILE = 'recipes.json'


def load_recipes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(RECIPES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_recipes(recipes):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –≤ JSON-—Ñ–∞–π–ª."""
    with open(RECIPES_FILE, 'w', encoding='utf-8') as f:
        json.dump(recipes, f, ensure_ascii=False, indent=4)


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏
RECIPES = load_recipes()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AddRecipeState(StatesGroup):
    name = State()
    ingredients = State()
    instructions = State()


class EditRecipeState(StatesGroup):
    name = State()
    part = State()
    new_value = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="add_recipe")],
        [InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="view_recipes")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="edit_recipe")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="delete_recipe")],
    ])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_recipe_list_keyboard(action):
    keyboard = []
    for name in RECIPES.keys():
        keyboard.append([InlineKeyboardButton(text=name, callback_data=f"{action}:{name}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def get_edit_recipe_keyboard(recipe_name):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_part:{recipe_name}:name")],
        [InlineKeyboardButton(text="–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", callback_data=f"edit_part:{recipe_name}:ingredients")],
        [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=f"edit_part:{recipe_name}:instructions")],
    ])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ—è –∫–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def handle_callback_query(callback: types.CallbackQuery, state: FSMContext):
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
    await callback.answer()

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –Ω–∞ —á–∞—Å—Ç–∏
    data = callback.data.split(':')
    action = data[0]

    if action == "add_recipe":
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç! –ù–∞–ø–∏—à–∏ –µ–≥–æ **–Ω–∞–∑–≤–∞–Ω–∏–µ**.")
        await state.set_state(AddRecipeState.name)

    elif action == "view_recipes":
        if not RECIPES:
            await callback.message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ!")
        else:
            keyboard = get_recipe_list_keyboard("show_recipe")
            await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ—Ü–µ–ø—Ç, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ:", reply_markup=keyboard)

    elif action == "edit_recipe":
        if not RECIPES:
            await callback.message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        else:
            keyboard = get_recipe_list_keyboard("select_to_edit")
            await callback.message.answer("–ö–∞–∫–æ–π —Ä–µ—Ü–µ–ø—Ç —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=keyboard)

    elif action == "delete_recipe":
        if not RECIPES:
            await callback.message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        else:
            keyboard = get_recipe_list_keyboard("delete_recipe_confirm")
            await callback.message.answer("–ö–∞–∫–æ–π —Ä–µ—Ü–µ–ø—Ç —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?", reply_markup=keyboard)

    elif action == "show_recipe":
        recipe_name = data[1]
        recipe = RECIPES.get(recipe_name)
        if recipe:
            message_text = f"**{recipe_name}**\n\n**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n{recipe['ingredients']}\n\n**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{recipe['instructions']}"
            await callback.message.answer(message_text, parse_mode='Markdown')
        else:
            await callback.message.answer("–ò–∑–≤–∏–Ω–∏, —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif action == "delete_recipe_confirm":
        recipe_name = data[1]
        if recipe_name in RECIPES:
            del RECIPES[recipe_name]
            save_recipes(RECIPES)
            await callback.message.answer(f"–†–µ—Ü–µ–ø—Ç '{recipe_name}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. üóëÔ∏è")
        else:
            await callback.message.answer("–≠—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.")

    elif action == "select_to_edit":
        recipe_name = data[1]
        if recipe_name in RECIPES:
            await state.update_data(recipe_name=recipe_name)
            keyboard = get_edit_recipe_keyboard(recipe_name)
            await callback.message.answer(f"–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ä–µ—Ü–µ–ø—Ç–µ '{recipe_name}'?", reply_markup=keyboard)
        else:
            await callback.message.answer("–≠—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif action == "edit_part":
        _, recipe_name, part = data
        await state.update_data(recipe_name=recipe_name, part_to_edit=part)
        await state.set_state(EditRecipeState.new_value)
        await callback.message.answer(f"–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{part}'.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(AddRecipeState.name)
async def process_recipe_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddRecipeState.ingredients)
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ **–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã** (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).")


@dp.message(AddRecipeState.ingredients)
async def process_ingredients(message: types.Message, state: FSMContext):
    await state.update_data(ingredients=message.text)
    await state.set_state(AddRecipeState.instructions)
    await message.reply("–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –ù–∞–ø–∏—à–∏ **–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é**.")


@dp.message(AddRecipeState.instructions)
async def process_instructions(message: types.Message, state: FSMContext):
    await state.update_data(instructions=message.text)
    user_data = await state.get_data()
    recipe_name = user_data.get("name")

    RECIPES[recipe_name] = {
        "ingredients": user_data.get("ingredients"),
        "instructions": user_data.get("instructions")
    }
    save_recipes(RECIPES)
    await state.clear()
    await message.reply(f"–†–µ—Ü–µ–ø—Ç '{recipe_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ")


@dp.message(EditRecipeState.new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    recipe_name = user_data.get('recipe_name')
    part_to_edit = user_data.get('part_to_edit')

    if recipe_name in RECIPES:
        if part_to_edit == 'name':
            new_name = message.text
            RECIPES[new_name] = RECIPES.pop(recipe_name)
            await message.reply(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'!")
        else:
            RECIPES[recipe_name][part_to_edit] = message.text
            await message.reply(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{part_to_edit}' –≤ —Ä–µ—Ü–µ–ø—Ç–µ '{recipe_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

        save_recipes(RECIPES)
    else:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()


# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":

    asyncio.run(main())
